     1                                  bits 32
     2                                  
     3                                  global start
     4                                  
     5                                  extern exit
     6                                  import exit msvcrt.dll
     7                                  
     8                                  segment data use32 class=data
     9                                  
    10 00000000 66                      a db 102
    11 00000001 03                      b db 3
    12 00000002 0200                    c dw 2
    13 00000004 08000000                e dd 8
    14 00000008 CC00000000000000        x dq 204
    15                                  
    16                                  segment code use32 class=code
    17                                  start:
    18                                      ; (100 + a + b * c)/(a - 100) + e + x / a = 116
    19                                      ; 
    20                                      ; a, b - byte
    21                                      ; c - word
    22                                      ; e - doubleword
    23                                      ; x - qword
    24                                      ; *interpretare fara semn*
    25                                      
    26 00000000 66B80000                    mov AX, 0 ; AX <- 0
    27 00000004 A0[01000000]                mov AL, [b] ; AX <- b
    28 00000009 66F725[02000000]            mul word[c] ; DX:AX <- AX * c = b * c
    29 00000010 6652                        push DX
    30 00000012 6650                        push AX
    31 00000014 58                          pop EAX
    32                                      ; EAX = b * c
    33                                      
    34 00000015 BB00000000                  mov EBX, 0 ; EBX <- 0
    35 0000001A 8A1D[00000000]              mov BL, [a] ; EBX <- a
    36 00000020 83C364                      add EBX, 100 ; EBX <- a + 100
    37 00000023 01D8                        add EAX, EBX ; EAX <- 100 + a + b * c
    38                                      ; EAX = 100 + a + b * c
    39                                      
    40 00000025 66BB0000                    mov BX, 0 ; BX <- 0
    41 00000029 8A1D[00000000]              mov BL, [a] ; BX <- a
    42 0000002F 6683EB64                    sub BX, 100 ; BX <- a - 100
    43                                      ; BX = a - 100
    44                                      
    45 00000033 66F7F3                      div BX ; AX <- EAX / BX
    46                                      ; AX = (100 + a + b * c) / (a - 100)
    47                                      
    48 00000036 BB00000000                  mov EBX, 0 ; EBX <- 0
    49 0000003B 6689C3                      mov BX, AX ; EBX <- AX
    50                                      
    51 0000003E 031D[04000000]              add EBX, [e] ; EBX <- AX + e
    52                                      ;EBX = (100 + a + b * c) / (a - 100) + e
    53                                      
    54 00000044 A1[08000000]                mov EAX, [x] ; EAX <- x (dword nesemn.)
    55 00000049 8B15[0C000000]              mov EDX, [x + 4] ; EDX <- x (dword semn.)
    56                                      ; EDX:EAX = x
    57                                      
    58 0000004F B900000000                  mov ECX, 0 ; ECX <- 0
    59 00000054 8A0D[00000000]              mov CL, [a] ; ECX <- a
    60                                      
    61 0000005A F7F1                        div ECX ; EAX <- EDX:EAX / ECX
    62                                      ; EAX = x / a
    63                                      
    64 0000005C 01D8                        add EAX, EBX
    65                                      ; EAX = (100 + a + b * c) / (a - 100) + e + x / a
    66                                      
    67 0000005E FF3500000000                push dword[0]
    68 00000064 FF15[00000000]              call [exit]
