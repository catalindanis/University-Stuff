     1                                  bits 32
     2                                  
     3                                  global start
     4                                  
     5                                  extern exit
     6                                  import exit msvcrt.dll
     7                                  
     8                                  segment data use32 class=data
     9                                  
    10 00000000 0C                      a db 12
    11 00000001 F9FF                    b dw -7
    12 00000003 05000000                c dd 5
    13 00000007 FEFFFFFFFFFFFFFF        d dq -2
    14                                  
    15                                  segment code use32 class=code
    16                                  start:
    17                                      ; (d + d - c) - (c + c - a) + (c + a) = 1 + 22 + 7 = 30
    18                                      ; (d + d - c) - (c + c - a) + (c + a) = -9 + 2 + 17 = 10
    19                                      ; a - byte
    20                                      ; b - word
    21                                      ; c - double word
    22                                      ; d - quad word
    23                                      ; *interpretare cu semn*
    24                                      
    25 00000000 A1[07000000]                mov eax, [d] ; eax <- d (dword nesemn.)
    26 00000005 8B15[0B000000]              mov edx, [d+4] ; edx <- d (dword semn.)
    27 0000000B 2B05[03000000]              sub eax, [c] ; eax <- d - c
    28 00000011 83DA00                      sbb edx, 0 ; edx <- (-CF) + d (dword semn.)
    29                                      ; edx:eax = d - c
    30 00000014 0305[07000000]              add eax, [d] ; eax <- eax + d (dword nesemn.)
    31 0000001A 1315[0B000000]              adc edx, [d+4] ; edx <- edx + d (dword semn.)
    32                                      ; edx:eax = d + d - c
    33                                      
    34 00000020 50                          push eax
    35 00000021 52                          push edx
    36                                      ; edx:eax -> stack 
    37                                      
    38 00000022 A1[03000000]                mov eax, [c] ; eax <- c
    39 00000027 99                          cdq ; edx:eax <- c
    40 00000028 0305[03000000]              add eax, [c] ; eax <- c + c
    41 0000002E 83D200                      adc edx, 0 ; edx <- 0 + CF
    42 00000031 89C3                        mov ebx, eax ; ebx <- eax
    43 00000033 89D1                        mov ecx, edx ; ecx <- edx
    44                                      ; ecx:ebx = c + c
    45 00000035 A0[00000000]                mov al, [a]
    46 0000003A 6698                        cbw ; ax <- a
    47 0000003C 98                          cwde ; eax <- a
    48 0000003D 99                          cdq 
    49                                      ; edx:eax <- a
    50 0000003E 29C3                        sub ebx, eax ; ebx <- ebx - a
    51 00000040 19D1                        sbb ecx, edx ; ecx <- ecx - edx
    52                                      ; ecx:ebx <- c + c - a
    53                                      
    54 00000042 A0[00000000]                mov al, [a]
    55 00000047 6698                        cbw ; ax <- a
    56 00000049 98                          cwde ; eax <- a
    57 0000004A 0305[03000000]              add eax, [c] ; eax <- c + a
    58 00000050 99                          cdq 
    59                                      ; edx:eax <- c + a
    60                                      
    61 00000051 29D8                        sub eax, ebx 
    62 00000053 19CA                        sbb edx, ecx
    63 00000055 89D1                        mov ecx, edx
    64 00000057 89C3                        mov ebx, eax
    65                                      ; ecx:ebx <- (c + a) - (c + c - a)
    66                                      
    67 00000059 5A                          pop edx
    68 0000005A 58                          pop eax
    69                                      ; edx:eax <- d + d - c
    70                                      
    71 0000005B 01D8                        add eax, ebx
    72 0000005D 11CA                        adc edx, ecx
    73                                      ; edx:eax = (d + d - c) - (c + c - a) + (c + a)
    74                                      
    75 0000005F FF3500000000                push dword[0]
    76 00000065 FF15[00000000]              call [exit]
