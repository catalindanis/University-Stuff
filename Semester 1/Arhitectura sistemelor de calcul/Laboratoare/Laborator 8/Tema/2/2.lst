     1                                  bits 32
     2                                  
     3                                  global start
     4                                  
     5                                  extern exit, fopen, fprintf, fscanf, fclose
     6                                  import exit msvcrt.dll
     7                                  import fopen msvcrt.dll
     8                                  import fprintf msvcrt.dll
     9                                  import fscanf msvcrt.dll
    10                                  import fclose msvcrt.dll
    11                                  
    12                                  segment data use32 class=data
    13                                  
    14 00000000 696E7075742E747874-     file_name db "input.txt", 0
    14 00000009 00                 
    15 0000000A 612B00                  file_access_mode db "a+", 0
    16 0000000D 00000000                descriptor dd 0
    17 00000011 256400                  format_citire db "%d", 0
    18 00000014 00000000                n dd 0
    19 00000018 0A56616C6F61726561-     format_afisare db 10, "Valoarea minima este : %d", 0
    19 00000021 206D696E696D612065-
    19 0000002A 737465203A20256400 
    20 00000033 00000000                minim dd 0
    21                                  
    22                                  segment code use32 class=code
    23                                  start:
    24                                      ;Se da un fisier text. Fisierul contine numere (in baza 10) 
    25                                      ;separate prin spatii. Sa se citeasca continutul acestui fisier, 
    26                                      ;sa se determine minimul numerelor citite si sa se scrie rezultatul 
    27                                      ;la sfarsitul fisierului.
    28                                      
    29                                      ;fopen(file_name, file_access_mode)
    30 00000000 68[0A000000]                push dword file_access_mode
    31 00000005 68[00000000]                push dword file_name
    32 0000000A FF15[00000000]              call [fopen]
    33 00000010 83C408                      add esp, 4 * 2
    34 00000013 83F800                      cmp eax, 0
    35 00000016 0F848C000000                je final
    36 0000001C A3[0D000000]                mov [descriptor], eax
    37                                      
    38                                      ;fscanf(descriptor, format_citire, &n)
    39 00000021 68[14000000]                push dword n
    40 00000026 68[11000000]                push dword format_citire
    41 0000002B FF35[0D000000]              push dword [descriptor]
    42 00000031 FF15[00000000]              call [fscanf]
    43 00000037 83C40C                      add esp, 4 * 3
    44                                          
    45 0000003A 8B1D[14000000]              mov ebx, [n]
    46 00000040 891D[33000000]              mov [minim], ebx
    47                                          
    48 00000046 83F8FF                      cmp eax, -1
    49 00000049 7434                        je gata_fisier
    50                                      
    51                                      repeta:
    52                                          ;fscanf(descriptor, format_citire, &n)
    53 0000004B 68[14000000]                    push dword n
    54 00000050 68[11000000]                    push dword format_citire
    55 00000055 FF35[0D000000]                  push dword [descriptor]
    56 0000005B FF15[00000000]                  call [fscanf]
    57 00000061 83C40C                          add esp, 4 * 3
    58                                          
    59 00000064 83F8FF                          cmp eax, -1
    60 00000067 7416                            je gata_fisier
    61                                          
    62 00000069 8B1D[14000000]                  mov ebx, [n]
    63 0000006F 3B1D[33000000]                  cmp ebx, [minim]
    64 00000075 7F06                            jg actualizare
    65 00000077 891D[33000000]                  mov [minim], ebx
    66                                          actualizare:
    67 0000007D EBCC                        jmp repeta
    68                                      gata_fisier:
    69                                      
    70 0000007F FF35[33000000]              push dword [minim]
    71 00000085 68[18000000]                push dword format_afisare
    72 0000008A FF35[0D000000]              push dword [descriptor]
    73 00000090 FF15[00000000]              call [fprintf]
    74 00000096 83C40C                      add esp, 4 * 3
    75                                      
    76 00000099 FF35[0D000000]              push dword [descriptor]
    77 0000009F FF15[00000000]              call [fclose]
    78 000000A5 83C404                      add esp, 4 * 1
    79                                      final:
    80 000000A8 6A00                        push dword 0
    81 000000AA FF15[00000000]              call [exit]
