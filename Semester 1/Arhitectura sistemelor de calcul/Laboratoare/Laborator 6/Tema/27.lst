     1                                  bits 32
     2                                  
     3                                  extern exit
     4                                  import exit msvcrt.dll
     5                                  
     6                                  global start
     7                                  
     8                                  segment data use32 class=data
     9                                  
    10 00000000 030002000100020004-     s dw 3, 2, 1, 2, 4, 3, 1, 3, 4, 5
    10 00000009 000300010003000400-
    10 00000012 0500               
    11                                  ls equ $-s
    12 00000014 00                      lc db 0
    13 00000015 00                      incmax db 0
    14 00000016 01                      lmax db 1
    15                                  
    16                                  segment code use32 class=code
    17                                  start:
    18                                      ;Dandu-se un sir de cuvinte,
    19                                      ;sa se calculeze cea mai lunga 
    20                                      ;secventa de cuvinte ordonate crescator din acest sir.
    21 00000000 B900000000                  mov ecx, 0 ; ecx reprezinta pozitia de unde incepe secventa curenta
    22 00000005 83F914                      cmp ecx, ls ; compar ecx cu ls inainte de a executa un set de pasi
    23 00000008 7D7D                        jge final ; daca lungimea sirului este <=0 atunci sar direct la finalul programului
    24 0000000A 83F902                      cmp ecx, 2 ; daca lungimea sirului este chiar 1, atunci stim rezultatul
    25 0000000D 746E                        je lungime_1
    26 0000000F FC                          cld ; setez direction flag la 0
    27                                      reindexare:
    28 00000010 BE[00000000]                    mov esi, s ; punem in sirul sursa sirul s
    29 00000015 01CE                            add esi, ecx ; setam pozitia de la care incepem cautarea
    30 00000017 89CB                            mov ebx, ecx ; folosim ebx ca index in bucla interioara
    31 00000019 83FB12                          cmp ebx, ls-2 ; comparam initial indexul curent cu lungimea sirului
    32 0000001C 7D3C                            jge sari ; daca avem doar 1 element in subsirul curent nu are rost sa verificam conditia
    33 0000001E C605[14000000]01                mov byte[lc], 1
    34                                          verificare_conditie:
    35 00000025 66AD                                lodsw ; AX <- s[ecx]
    36 00000027 6689C2                              mov DX, AX ; DX <- s[ecx]
    37 0000002A 66AD                                lodsw ; AX <- s[ecx+1]
    38 0000002C 83EE02                              sub ESI, 2 
    39 0000002F 6639C2                              cmp DX, AX ; compar s[ecx] cu s[ecx+1]
    40 00000032 7F0E                                jg iesire ; daca nu respecta conditia => ies din bucla
    41 00000034 FE05[14000000]                      inc byte[lc] ; incrementez lungimea curenta a secventei
    42 0000003A 83C302                              add ebx, 2 ; incrementez indicele din bucla interioara
    43 0000003D 83FB12                              cmp ebx, ls-2 ; verific conditia din bucla interioara
    44 00000040 7CE3                            jl verificare_conditie
    45                                          iesire:
    46 00000042 A0[14000000]                    mov al, [lc] ; pun in al lungimea curenta a secventei
    47 00000047 3A05[16000000]                  cmp al, [lmax] ; compar lungimea curenta a secventei cu lungimea maxima de pana acum
    48 0000004D 7E0B                            jle sari ; daca lungimea curenta e mai mica, nu ne intereseaza
    49                                                   ; in caz contrar, actualizez variabilele de maxim cu valorile curente
    50 0000004F A2[16000000]                    mov [lmax], al
    51 00000054 880D[15000000]                  mov [incmax], cl
    52                                          sari:
    53 0000005A 83C102                          add ecx, 2 ; crestem din 2 in 2 (lucram pe word)
    54 0000005D 83F914                          cmp ecx, ls ; eticheta reindexare se repeta doar cat timp ecx < ls
    55 00000060 7CAE                        jl reindexare
    56 00000062 B800000000                  mov eax, 0 ; zerorizez eax
    57 00000067 A0[15000000]                mov al, [incmax] ; pun in eax indicele de start a secventei maxime
    58 0000006C B101                        mov cl, 1 ; initializez cl pentru a-l putea folosi la shiftarea spre dreapta
    59 0000006E D3E8                        shr eax, cl ; impart cu 2 valoarea din eax
    60 00000070 B900000000                  mov ecx, 0 ; zerorizez ecx
    61 00000075 8B0D[16000000]              mov ecx, [lmax] ; pun in ecx lungimea maxima
    62 0000007B EB0A                        jmp final ; daca am ajuns aici trebuie sa sarim la final pentru a nu executa
    63                                                ; cazul sirului de lungime 1
    64                                      lungime_1: ; daca lungimea sirului este 1 => cea mai lunga secventa este chiar elementul
    65 0000007D B800000000                      mov eax, 0
    66 00000082 B901000000                      mov ecx, 1
    67                                      final:
    68 00000087 6A00                        push dword 0
    69 00000089 FF15[00000000]              call [exit]
